函数式编程的特点：允许把函数本身作为参数传入另一个参数，还允许返回一个函数!


高阶函数把函数作为函数的参数，这种编程方式即为函数式编程；

最简单的高阶函数：

def add(x, y, f):
    return f(x) + f(y)



高阶函数接受函数作为参数
python的内置高阶函数：
1）map()
map函数接收两个参数，一个是函数，一个是Iterable；
作用：将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。

2） reduce()
作用：把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果极小和序列的下一个元素做累积运算；
例如：
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

3）filter()
Filter()接收一个函数和序列。
作用：把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素

4）sorted
sorted函数先接收一个序列，再接收一个函数；
指定该序列按照该函数处理后的结果，进行排序


高阶函数把函数作为结果值返回
特点：
1）在函数中再建一个新函数；
2）需要先调用外层函数，再调用内层函数；
3）函数的参数，可以从外层函数传递到内层函数；
应用场景：
可以在其他时间结点，运行该函数；

闭包:
内部函数可以引用外部函数的参数和局部变量，并且当执行返回函数时，相关参数和变量都保存在返回的函数中。
例如：创建一个计数器；

装饰器

应用场景：
	1. 在函数调用前后自动打印日志，但又不希望改变某个函数的定义；
	2. 在代码运行期间动态增加功能；
使用方法：
	1. decorator函数的编写，返回的时一个函数；
	2. 在要装饰的函数前添加@函数名

匿名函数
1）使用lambda，不需要担心函数名的问题；
并且可以匿名函数赋给某个变量，利用该变量进行函数调用；
